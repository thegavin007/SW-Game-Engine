-- Define the input text as a string
local input = [[
# Blender 4.1.1
# www.blender.org
mtllib SHOTGUN.mtl
o Cube
v 0.000261 0.068272 -0.939799
v 0.000261 0.068272 -0.093870
v 0.039425 0.059333 -0.939799
v 0.039425 0.059333 -0.093870
v 0.070831 0.034287 -0.939799
v 0.070831 0.034287 -0.093870
v 0.088261 -0.001906 -0.939799
v 0.088261 -0.001906 -0.093870
v 0.088261 -0.042076 -0.939799
v 0.088261 -0.042076 -0.093870
v 0.070831 -0.078269 -0.939799
v 0.070831 -0.078269 -0.093870
v 0.039425 -0.103315 -0.939799
v 0.039425 -0.103315 -0.093870
v 0.000261 -0.112253 -0.939799
v -0.038902 0.089586 -0.093870
v -0.038902 -0.103315 -0.939799
v -0.038902 -0.103315 -0.093870
v -0.070309 -0.078269 -0.939799
v -0.070309 -0.078269 -0.093870
v -0.087738 -0.042076 -0.939799
v -0.087738 -0.042076 -0.093870
v -0.087738 -0.001906 -0.939799
v -0.087738 -0.001906 -0.093870
v -0.070309 0.034287 -0.939799
v -0.070309 0.034287 -0.093870
v -0.038902 0.059333 -0.939799
v -0.038902 0.059333 -0.093870
v 0.049544 0.045593 -0.085147
v 0.049544 -0.079216 -0.085147
v 0.049544 0.016565 0.118102
v 0.049544 -0.156749 0.118102
v -0.049021 0.045593 -0.085147
v -0.049021 -0.079216 -0.085147
v -0.049021 0.016565 0.118102
v 0.000261 0.083465 -0.939799
v 0.049544 -0.069336 0.376025
v 0.049544 -0.165116 0.376025
v -0.049021 -0.069336 0.376025
v -0.049021 -0.165116 0.376025
v 0.004229 -0.167237 -0.075601
v 0.000261 -0.112253 -0.093870
v 0.039425 0.089586 -0.093870
v 0.000261 0.077479 -0.093870
v -0.049021 -0.156749 0.118102
v 0.039425 -0.103315 -0.125276
v -0.038902 -0.103315 -0.125276
v 0.004229 -0.167237 -0.107007
v 0.000261 -0.112253 -0.125276
vn 0.2225 0.9749 -0.0000
vn 0.6235 0.7818 -0.0000
vn 0.9010 0.4339 -0.0000
vn 1.0000 -0.0000 -0.0000
vn 0.9010 -0.4339 -0.0000
vn 0.6235 -0.7818 -0.0000
vn 0.2225 -0.9749 -0.0000
vn -0.2225 -0.9749 -0.0000
vn -0.6235 -0.7818 -0.0000
vn -0.9010 -0.4339 -0.0000
vn -1.0000 -0.0000 -0.0000
vn -0.9010 0.4339 -0.0000
vn -0.0000 -0.0000 1.0000
vn -0.6235 0.7818 -0.0000
vn -0.2225 0.9749 -0.0000
vn -0.0000 -0.0000 -1.0000
vn -0.0000 -0.9900 -0.1414
vn -0.0000 0.9343 0.3564
vn -0.0000 -0.9488 -0.3160
vn -0.0000 0.9995 0.0324
vn 0.8289 0.5593 -0.0000
vn -0.8760 0.4823 -0.0000
vn -0.0707 0.3099 0.9481
vn 0.0729 0.3192 0.9449
vt 1.000000 1.000000
vt 0.928571 0.500000
vt 1.000000 0.500000
vt 0.928571 1.000000
vt 0.857143 0.500000
vt 0.857143 1.000000
vt 0.785714 0.500000
vt 0.785714 1.000000
vt 0.714286 0.500000
vt 0.714286 1.000000
vt 0.642857 0.500000
vt 0.642857 1.000000
vt 0.571428 0.500000
vt 0.571428 1.000000
vt 0.500000 0.500000
vt 0.500000 1.000000
vt 0.428571 0.500000
vt 0.428571 1.000000
vt 0.357143 0.500000
vt 0.357143 1.000000
vt 0.285714 0.500000
vt 0.285714 1.000000
vt 0.214286 0.500000
vt 0.214286 1.000000
vt 0.142857 0.500000
vt 0.483983 0.196595
vt 0.437640 0.399638
vt 0.062360 0.399638
vt 0.142857 1.000000
vt 0.071428 0.500000
vt 0.071428 1.000000
vt -0.000000 0.500000
vt 0.983983 0.303405
vt 0.750000 0.010000
vt 0.516017 0.303405
vt 0.625000 0.000000
vt 0.375000 0.250000
vt 0.375000 0.000000
vt 0.625000 0.500000
vt 0.375000 0.500000
vt 0.625000 0.750000
vt 0.375000 0.750000
vt 0.375000 1.000000
vt 0.125000 0.750000
vt 0.125000 0.500000
vt 0.875000 0.500000
vt 0.625000 0.250000
vt 0.000000 0.000000
vt -0.000000 1.000000
vt 0.145868 0.033767
vt 0.250000 0.010000
vt 0.354132 0.033767
vt 0.354132 0.466233
vt 0.250000 0.490000
vt 0.145868 0.466233
vt 0.016017 0.303405
vt 0.016017 0.196595
vt 0.062360 0.100362
vt 0.437640 0.100362
vt 0.483983 0.303405
vt 0.645868 0.466233
vt 0.750000 0.490000
vt 0.854132 0.466233
vt 0.937640 0.399638
vt 0.983983 0.196595
vt 0.937640 0.100362
vt 0.854132 0.033767
vt 0.645868 0.033767
vt 0.562360 0.100362
vt 0.516017 0.196595
vt 0.562360 0.399638
vt 0.625000 1.000000
vt 0.875000 0.750000
s 0
f 2/1/1 3/2/1 1/3/1
f 4/4/2 5/5/2 3/2/2
f 6/6/3 7/7/3 5/5/3
f 8/8/4 9/9/4 7/7/4
f 10/10/5 11/11/5 9/9/5
f 12/12/6 13/13/6 11/11/6
f 14/14/7 15/15/7 13/13/7
f 42/16/8 17/17/8 15/15/8
f 18/18/9 19/19/9 17/17/9
f 20/20/10 21/21/10 19/19/10
f 22/22/11 23/23/11 21/21/11
f 24/24/12 25/25/12 23/23/12
f 10/26/13 6/27/13 26/28/13
f 26/29/14 27/30/14 25/25/14
f 28/31/15 1/32/15 27/30/15
f 7/33/16 15/34/16 23/35/16
f 30/36/11 31/37/11 29/38/11
f 45/39/4 39/40/4 40/39/4
f 35/40/4 34/41/4 33/42/4
f 34/41/13 29/43/13 33/42/13
f 35/40/17 29/44/17 31/45/17
f 32/46/18 34/41/18 45/39/18
f 38/47/16 39/40/16 37/37/16
f 31/45/19 39/40/19 35/40/19
f 45/39/20 38/46/20 32/46/20
f 32/47/11 37/37/11 31/37/11
f 1/32/16 27/30/16 36/32/16
f 18/48/21 48/48/21 47/48/21
f 14/48/22 48/48/22 41/48/22
f 3/2/16 1/3/16 36/2/16
f 28/31/13 44/49/13 16/31/13
f 4/4/13 44/1/13 2/1/13
f 46/14/23 49/16/23 48/14/23
f 49/16/24 47/18/24 48/16/24
f 18/50/8 49/51/8 42/51/8
f 42/51/7 46/52/7 14/52/7
f 2/1/1 4/4/1 3/2/1
f 4/4/2 6/6/2 5/5/2
f 6/6/3 8/8/3 7/7/3
f 8/8/4 10/10/4 9/9/4
f 10/10/5 12/12/5 11/11/5
f 12/12/6 14/14/6 13/13/6
f 14/14/7 42/16/7 15/15/7
f 42/16/8 18/18/8 17/17/8
f 18/18/9 20/20/9 19/19/9
f 20/20/10 22/22/10 21/21/10
f 22/22/11 24/24/11 23/23/11
f 24/24/12 26/29/12 25/25/12
f 6/27/13 4/53/13 26/28/13
f 4/53/13 2/54/13 26/28/13
f 2/54/13 28/55/13 26/28/13
f 26/28/13 24/56/13 22/57/13
f 22/57/13 20/58/13 18/50/13
f 18/50/13 42/51/13 14/52/13
f 14/52/13 12/59/13 10/26/13
f 10/26/13 8/60/13 6/27/13
f 26/28/13 22/57/13 18/50/13
f 18/50/13 14/52/13 26/28/13
f 14/52/13 10/26/13 26/28/13
f 26/29/14 28/31/14 27/30/14
f 28/31/15 2/49/15 1/32/15
f 27/61/16 1/62/16 3/63/16
f 3/63/16 5/64/16 27/61/16
f 5/64/16 7/33/16 27/61/16
f 7/33/16 9/65/16 11/66/16
f 11/66/16 13/67/16 7/33/16
f 13/67/16 15/34/16 7/33/16
f 15/34/16 17/68/16 19/69/16
f 19/69/16 21/70/16 23/35/16
f 23/35/16 25/71/16 27/61/16
f 15/34/16 19/69/16 23/35/16
f 23/35/16 27/61/16 7/33/16
f 30/36/11 32/47/11 31/37/11
f 45/39/4 35/40/4 39/40/4
f 35/40/4 45/39/4 34/41/4
f 34/41/13 30/72/13 29/43/13
f 35/40/17 33/42/17 29/44/17
f 32/46/18 30/73/18 34/41/18
f 38/47/16 40/39/16 39/40/16
f 31/45/19 37/45/19 39/40/19
f 45/39/20 40/39/20 38/46/20
f 32/47/11 38/47/11 37/37/11
f 18/48/21 41/48/21 48/48/21
f 14/48/22 46/48/22 48/48/22
f 28/31/13 2/49/13 44/49/13
f 4/4/13 43/4/13 44/1/13
f 18/50/8 47/50/8 49/51/8
f 42/51/7 49/51/7 46/52/7

]]

-- Rounding variable
local rounding = 3

-- Split the input text into lines
local lines = {}
for line in input:gmatch("[^\r\n]+") do
    table.insert(lines, line)
end

-- Initialize tables for vertices and faces
local vertices = {}
local faces = {}

-- Parse each line and extract vertices and faces
for _, line in ipairs(lines) do
    local prefix, data = line:match("(%a+)%s+(.+)")
    if prefix == "v" then
        local vertex = {}
        for num in data:gmatch("%S+") do
            table.insert(vertex, tonumber(num))
        end
        table.insert(vertices, vertex)
    elseif prefix == "f" then
        local face = {}
        for indices in data:gmatch("(%d+)/%d+/%d+") do
            table.insert(face, tonumber(indices))
        end
        table.insert(faces, face)
    end
end
function charCount(str)
    local count = 0
    for _ in str:gmatch(".") do
        count = count + 1
    end
    return count
end
-- Function to round numbers and remove trailing zeros
local function round(number)
    local mult = 10^(rounding or 0)
    local rounded_num = math.floor(number * mult + 0.5) / mult
    return tostring(rounded_num):gsub("%.?0+$", "")
end

-- Print vertices as Lua table on a single line
local vertices_str = "{"
for _, vertex in ipairs(vertices) do
    local formatted_vertex = {}
    for _, num in ipairs(vertex) do
        table.insert(formatted_vertex, round(num) .. ",")
    end
    vertices_str = vertices_str .. table.concat(formatted_vertex, "")
end
vertices_str = vertices_str:sub(1, -2) .. "}"
print("v/verticies = " .. vertices_str)

if charCount(vertices_str) > 4096 then
print("(vertices bad) char:".. charCount(vertices_str))
else
print("(vertices good) char:".. charCount(vertices_str))
end

-- Print faces as Lua table on a single line
local faces_str = "{"
for _, face in ipairs(faces) do
    local formatted_face = {}
    for _, num in ipairs(face) do
        table.insert(formatted_face, tostring(num) .. ",")
    end
    faces_str = faces_str .. table.concat(formatted_face, "")
end
faces_str = faces_str:sub(1, -2) .. "}"
print("t/faces = " .. faces_str)

if charCount(faces_str) > 4096 then
print("(faces good) char:".. charCount(faces_str))
else
print("(faces good) char:".. charCount(faces_str))
end
